/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.Links;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LinksRecord extends UpdatableRecordImpl<LinksRecord> implements Record4<String, Long, OffsetDateTime, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LINKS.URL</code>.
     */
    public void setUrl(@NotNull String value) {
        set(0, value);
    }

    /**
     * Getter for <code>LINKS.URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 255)
    @NotNull
    public String getUrl() {
        return (String) get(0);
    }

    /**
     * Setter for <code>LINKS.ID</code>.
     */
    public void setId(@NotNull Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>LINKS.ID</code>.
     */
    @NotNull
    public Long getId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>LINKS.LAST_CHECK_TIME</code>.
     */
    public void setLastCheckTime(@Nullable OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>LINKS.LAST_CHECK_TIME</code>.
     */
    @Nullable
    public OffsetDateTime getLastCheckTime() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>LINKS.COUNT</code>.
     */
    public void setCount(@Nullable Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>LINKS.COUNT</code>.
     */
    @Nullable
    public Integer getCount() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<String, Long, OffsetDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row4<String, Long, OffsetDateTime, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<String> field1() {
        return Links.LINKS.URL;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return Links.LINKS.ID;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field3() {
        return Links.LINKS.LAST_CHECK_TIME;
    }

    @Override
    @NotNull
    public Field<Integer> field4() {
        return Links.LINKS.COUNT;
    }

    @Override
    @NotNull
    public String component1() {
        return getUrl();
    }

    @Override
    @NotNull
    public Long component2() {
        return getId();
    }

    @Override
    @Nullable
    public OffsetDateTime component3() {
        return getLastCheckTime();
    }

    @Override
    @Nullable
    public Integer component4() {
        return getCount();
    }

    @Override
    @NotNull
    public String value1() {
        return getUrl();
    }

    @Override
    @NotNull
    public Long value2() {
        return getId();
    }

    @Override
    @Nullable
    public OffsetDateTime value3() {
        return getLastCheckTime();
    }

    @Override
    @Nullable
    public Integer value4() {
        return getCount();
    }

    @Override
    @NotNull
    public LinksRecord value1(@NotNull String value) {
        setUrl(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value2(@NotNull Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value3(@Nullable OffsetDateTime value) {
        setLastCheckTime(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value4(@Nullable Integer value) {
        setCount(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord values(@NotNull String value1, @NotNull Long value2, @Nullable OffsetDateTime value3, @Nullable Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LinksRecord
     */
    public LinksRecord() {
        super(Links.LINKS);
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    @ConstructorProperties({ "url", "id", "lastCheckTime", "count" })
    public LinksRecord(@NotNull String url, @NotNull Long id, @Nullable OffsetDateTime lastCheckTime, @Nullable Integer count) {
        super(Links.LINKS);

        setUrl(url);
        setId(id);
        setLastCheckTime(lastCheckTime);
        setCount(count);
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    public LinksRecord(ru.tinkoff.edu.java.scrapper.domain.jooq.tables.pojos.Links value) {
        super(Links.LINKS);

        if (value != null) {
            setUrl(value.getUrl());
            setId(value.getId());
            setLastCheckTime(value.getLastCheckTime());
            setCount(value.getCount());
        }
    }
}
